

    if (command == prefix + 'shop') {
        const guildShop = shop.filter(item => !item.custom.hidden)

        if (!guildShop.length) {
            return message.channel.send(`${message.author}, there are no items in the shop.`)
        }

        message.channel.send(
            `**${message.guild.name}** - Guild Shop **[${guildShop.length} items]**:\n\n` +

            `${guildShop
                .map((item, index) =>
                    `${index + 1} - ${item.custom.locked ? ' ðŸ”’ | ' : ' '}${item.custom.emoji} ` +
                    `**${item.name}** (ID: **${item.id}**) - **${item.price}** coins`)
                .join('\n')}`
        )
    }

    if (command == prefix + 'shop_find') {
        const [itemID] = args

        const item = shop.find(item => item.id == parseInt(itemID) || item.name == itemID)

        if (!itemID) {
            return message.channel.send(`${message.author}, please specify an item.`)
        }

        if (!item || item?.custom?.hidden) {
            return message.channel.send(`${message.author}, item not found.`)
        }

        message.channel.send(
            `**${item.custom.emoji} ${item.name}** - Item Info:\n\n` +

            `Name: ${item.name}` +
            `${item.custom.locked ? ` [ðŸ”’ | Locked since ${new Date(item.custom.lockedSince)
                .toLocaleString()}]` : ''}\n` +

            `ID: **${item.id}**\n` +
            `Emoji: ${item.custom.emoji}\n\n` +

            `Price: **${item.price}** coins\n` +
            `Description: **${item.description}**\n` +
            `Max quantity in inventory: **${item.maxAmount}**\n\n` +

            `${item.role ? `Role: **<@&${item.role}>**\n` : ''}` +
            `Hidden: **${item.custom.hidden ? 'Yes' : 'No'}**\n` +
            `Locked: **${item.custom.locked ? 'Yes' : 'No'}**\n\n` +

            `Message on use: **${item.message}**\n` +
            `Created at: **${item.date}**`
        )
    }


    if (command == prefix + 'shop_add') {
        const [name, emoji, priceString] = args

        const price = parseInt(priceString)
        const messageOnUse = args.slice(3).join(' ')

        // message on use is optional and defaults to `You have used this item!`

        // supports choosing a random string from a specified strings list with following syntax:
        // [random="str", "str1", "str2"]

        // for example, if specifying `What a [random="wonderful", "great", "sunny"] day!` as message on use
        // then in returned message, `[random="wonderful", "great", "sunny"]` will be replaced with either
        // "wonderful", "great" or "sunny".

        if (!name) {
            return message.channel.send(`${message.author}, please provide a name for the item.`)
        }

        if (!emoji) {
            return message.channel.send(`${message.author}, please provide an emoji for the item.`)
        }

        if (!price) {
            return message.channel.send(`${message.author}, please provide a price for the item.`)
        }

        const newItem = await guild.shop.addItem({
            name,
            price,
            message: messageOnUse || '',

            custom: {
                emoji,
                hidden: false,
                locked: false,
                hiddenSince: null,
                lockedSince: null
            }
        })

        message.channel.send(
            `${message.author}, you added **${newItem.name}** for **${newItem.price}** coins to the shop.`
        )
    }

    if (command == prefix + 'shop_remove') {
        const [itemID] = args

        const item = shop.find(item => item.id == parseInt(itemID) || item.name == itemID)

        if (!item) {
            return message.channel.send(`${message.author}, item not found.`)
        }

        await item.delete()

        message.channel.send(
            `${message.author}, you removed **${item.name}** from the shop.`
        )
    }

    if (command == prefix + 'shop_edit') {
        const itemProperties = ['description', 'price', 'name', 'message', 'maxAmount', 'role']

        const [itemID, itemProperty] = args
        const newValue = args.slice(2).join(' ')

        const item = shop.find(item => item.id == parseInt(itemID) || item.name == itemID)

        if (!itemID) {
            return message.channel.send(`${message.author}, please provide an item ID.`)
        }

        if (!item) {
            return message.channel.send(`${message.author}, item not found.`)
        }

        if (!itemProperty) {
            return message.channel.send(
                `${message.author}, please provide an item property to change. ` +
                `Valid item properties are: ${itemProperties.map(prop => `\`${prop}\``).join(', ')}`
            )
        }

        if (!itemProperties.includes(itemProperty)) {
            return message.channel.send(
                `${message.author}, item property you specified is not valid. ` +
                `Valid item properties are: ${itemProperties.map(prop => `\`${prop}\``).join(', ')}`
            )
        }

        if (!newValue) {
            return message.channel.send(`${message.author}, please provide a new value for the item property.`)
        }

        await item.edit(itemProperty, newValue)

        message.channel.send(
            `${message.author}, you changed **${item.name}**'s **${itemProperty}** to **${newValue}**.`
        )
    }


    if (command == prefix + 'shop_hide') {
        const [itemID] = args
        const item = shop.find(item => item.id == parseInt(itemID) || item.name == itemID)

        if (!itemID) {
            return message.channel.send(`${message.author}, please provide an item ID.`)
        }

        if (!item) {
            return message.channel.send(`${message.author}, item not found.`)
        }

        if (item.custom.hidden) {
            return message.channel.send(`${message.author}, item is already hidden.`)
        }

        await item.setCustom({
            emoji: item.custom.emoji,
            hidden: true,
            hiddenSince: Date.now(),
            locked: item.custom.locked,
            lockedSince: item.custom.lockedSince
        })

        message.channel.send(
            `${message.author}, you hid the item **${item.name}** from the shop.`
        )
    }

    if (command == prefix + 'shop_hidden') {
        const hiddenShop = shop.filter(item => item.custom.hidden)

        if (!hiddenShop.length) {
            return message.channel.send(`${message.author}, there are no hidden items in the shop.`)
        }

        message.channel.send(
            `**${message.guild.name}** - Hidden Shop **[${hiddenShop.length} items]**:\n\n` +

            `${hiddenShop
                .map((item, index) =>
                    `${index + 1} - ${item.custom.locked ? ' ðŸ”’ | ' : ' '}${item.custom.emoji} ` +
                    `**${item.name}** (ID: **${item.id}**) - **${item.price}** coins ` +
                    `(Since **${new Date(item.custom.hiddenSince).toLocaleString()}**)`
                )
                .join('\n')}`
        )
    }

    if (command == prefix + 'shop_show') {
        const [itemID] = args
        const item = shop.find(item => item.id == parseInt(itemID) || item.name == itemID)

        if (!itemID) {
            return message.channel.send(`${message.author}, please provide an item ID.`)
        }

        if (!item) {
            return message.channel.send(`${message.author}, item not found.`)
        }

        if (!item.custom.hidden) {
            return message.channel.send(`${message.author}, item is already visible.`)
        }

        await item.setCustom({
            emoji: item.custom.emoji,
            hidden: false,
            hiddenSince: null,
            locked: item.custom.locked,
            lockedSince: item.custom.lockedSince
        })

        message.channel.send(
            `${message.author}, item **${item.name}** is now visible in the shop.`
        )
    }


    if (command == prefix + 'shop_lock') {
        const [itemID] = args
        const item = shop.find(item => item.id == parseInt(itemID) || item.name == itemID)

        if (!itemID) {
            return message.channel.send(`${message.author}, please provide an item ID.`)
        }

        if (!item) {
            return message.channel.send(`${message.author}, item not found.`)
        }

        if (item.custom.locked) {
            return message.channel.send(`${message.author}, item is already locked.`)
        }

        await item.setCustom({
            emoji: item.custom.emoji,
            hidden: item.custom.hidden,
            hiddenSince: item.custom.hiddenSince,
            locked: true,
            lockedSince: Date.now()
        })

        message.channel.send(
            `${message.author}, you locked the item **${item.name}** in the shop.`
        )
    }

    if (command == prefix + 'shop_locked') {
        const lockedShop = shop.filter(item => item.custom.locked)

        if (!lockedShop.length) {
            return message.channel.send(`${message.author}, there are no locked items in the shop.`)
        }

        message.channel.send(
            `**${message.guild.name}** - Locked Shop **[${lockedShop.length} items]**:\n\n` +

            `${lockedShop
                .map((item, index) =>
                    `${index + 1} - ${item.custom.locked ? ' ðŸ”’ | ' : ' '}${item.custom.emoji} ` +
                    `**${item.name}** (ID: **${item.id}**) - **${item.price}** coins ` +
                    `(Since **${new Date(item.custom.lockedSince).toLocaleString()}**)`
                )
                .join('\n')}`
        )
    }

    if (command == prefix + 'shop_unlock') {
        const [itemID] = args

        const item = shop.find(item => item.id == parseInt(itemID) || item.name == itemID)

        if (!itemID) {
            return message.channel.send(`${message.author}, please provide an item ID.`)
        }

        if (!item) {
            return message.channel.send(`${message.author}, item not found.`)
        }

        if (!item.custom.locked) {
            return message.channel.send(`${message.author}, item is already unlocked.`)
        }

        await item.setCustom({
            emoji: item.custom.emoji,
            hidden: item.custom.hidden,
            hiddenSince: item.custom.hiddenSince,
            locked: false,
            lockedSince: null
        })

        message.channel.send(
            `${message.author}, you unlocked the item **${item.name}** in the shop.`
        )
    }


    if (command == prefix + 'shop_clear') {
        if (!shop.length) {
            return message.channel.send(`${message.author}, there are no items in the shop.`)
        }

        await guild.shop.clear()

        message.channel.send(
            `${message.author}, cleared **${shop.length}** items from the shop.`
        )
    }


    if (command == prefix + 'inventory') {
        const userInventory = inventory.filter(item => !item.custom.hidden)

        if (!userInventory.length) {
            return message.channel.send(`${message.author}, you don't have any items in your inventory.`)
        }

        const cleanInventory = [...new Set(userInventory.map(item => item.name))]
            .map(itemName => shop.find(shopItem => shopItem.name == itemName))
            .map(item => {
                const quantity = userInventory.filter(invItem => invItem.name == item.name).length

                return {
                    quantity,
                    totalPrice: item.price * quantity,
                    item
                }
            })

        message.channel.send(
            `${message.author}, here's your inventory [**${userInventory.length} items**]:\n\n` +
            cleanInventory
                .map(
                    (data, index) =>
                        `${index + 1} - **x${data.quantity} ${data.item.custom.emoji} ` +
                        `${data.item.name}** (ID: **${data.item.id}**) ` +
                        `for **${data.totalPrice}** coins`
                )
                .join('\n')
        )
    }

    if (command == prefix + 'inventory_clear') {
        if (!inventory.length) {
            return message.channel.send(`${message.author}, you don't have any items in your inventory.`)
        }

        await user.inventory.clear()

        message.channel.send(
            `${message.author}, cleared **${inventory.length}** items from your inventory.`
        )
    }


    if (command == prefix + 'history') {
        const userHistory = history.filter(item => !item.custom.hidden)

        if (!userHistory.length) {
            return message.channel.send(`${message.author}, you don't have any items in your purchases history.`)
        }

        message.channel.send(
            `${message.author}, here's your purchases history [**${userHistory.length} items**]:\n\n` +
            userHistory
                .map(
                    item => `**x${item.quantity} ${item.custom.emoji} ${item.name}** - ` +
                        `**${item.price}** coins (**${item.date}**)`
                )
                .join('\n')
        )
    }

    if (command == prefix + 'history_clear') {
        if (!history.length) {
            return message.channel.send(`${message.author}, you don't have any items in your purchases history.`)
        }

        await user.history.clear()

        message.channel.send(
            `${message.author}, cleared **${history.length}** items from your purchases history.`
        )
    }


    if (command == prefix + 'shop_buy') {
        const [itemID, quantityString] = args
        const quantity = parseInt(quantityString) || 1

        const item = shop.find(item => item.id == parseInt(itemID) || item.name == itemID)

        if (!itemID) {
            return message.channel.send(`${message.author}, please specify an item.`)
        }

        if (!item || item?.custom?.hidden) {
            return message.channel.send(`${message.author}, item not found.`)
        }

        if (item.custom.locked) {
            return message.channel.send(`${message.author}, this item is locked - you cannot buy it.`)
        }

        if (!await item.isEnoughMoneyFor(message.author.id, quantity)) {
            return message.channel.send(
                `${message.author}, you don't have enough coins to buy ` +
                `**x${quantity} ${item.custom.emoji} ${item.name}**.`
            )
        }

        const buyingResult = await user.items.buy(item.id, quantity)

        if (!buyingResult.status) {
            return message.channel.send(`${message.author}, failed to buy the item: ${buyingResult.message}`)
        }

        message.channel.send(
            `${message.author}, you bought **x${buyingResult.quantity} ` +
            `${item.custom.emoji} ${item.name}** for **${buyingResult.totalPrice}** coins.`
        )
    }

    if (command == prefix + 'shop_use') {
        const [itemID] = args
        const item = inventory.find(item => item.id == parseInt(itemID) || item.name == itemID)

        if (!itemID) {
            return message.channel.send(`${message.author}, please specify an item in your inventory.`)
        }

        if (!item || item?.custom?.hidden) {
            return message.channel.send(`${message.author}, item not found in your inventory.`)
        }

        if (item.custom.locked) {
            return message.channel.send(`${message.author}, this item is locked - you cannot use it.`)
        }

        const resultMessage = await item.use(client)
        message.channel.send(resultMessage)
    }

    if (command == prefix + 'shop_sell') {
        const [itemID, quantityString] = args
        const quantity = parseInt(quantityString) || 1

        const item = inventory.find(item => item.id == parseInt(itemID) || item.name == itemID)

        if (!itemID) {
            return message.channel.send(`${message.author}, please specify an item in your inventory.`)
        }

        if (!item) {
            return message.channel.send(`${message.author}, item not found in your inventory.`)
        }

        if (item.custom.locked) {
            return message.channel.send(`${message.author}, this item is locked - you cannot sell it.`)
        }

        const sellingResult = await user.items.sell(item.id, quantity)

        if (!sellingResult.status) {
            return message.channel.send(`${message.author}, failed to sell the item: ${sellingResult.message}`)
        }

        message.channel.send(
            `${message.author}, you sold **x${sellingResult.quantity} ` +
            `${item.custom.emoji} ${item.name}** for **${sellingResult.totalPrice}** coins.`
        )
    }
})



if (command == prefix + 'deposit') {
        const [amountString] = args

        const userBalance = await user.balance.get()
        const amount = amountString == 'all' ? userBalance : parseInt(amountString)

        if (userBalance < amount || !userBalance) {
            return message.channel.send(
                `${message.author}, you don't have enough coins ` +
                'to perform this deposit.'
            )
        }

        await user.balance.subtract(amount, `depositted ${amount} coins`)
        await user.bank.add(amount, `depositted ${amount} coins`)

        message.channel.send(
            `${message.author}, you depositted **${amount}** coins to your bank.`
        )
    }

    if (command == prefix + 'withdraw') {
        const [amountString] = args

        const userBankBalance = await user.bank.get()
        const amount = amountString == 'all' ? userBankBalance : parseInt(amountString)

        if (userBankBalance < amount || !userBankBalance) {
            return message.channel.send(
                `${message.author}, you don't have enough coins ` +
                'in your bank to perform this withdraw.'
            )
        }

        await user.balance.add(amount, `withdrew ${amount} coins`)
        await user.bank.subtract(amount, `withdrew ${amount} coins`)

        message.channel.send(
            `${message.author}, you withdrew **${amount}** coins from your bank.`
        )
    }




    if (command == prefix + 'daily') {
        const dailyResult = await user.rewards.getDaily()

        if (!dailyResult.claimed) {
            const cooldownTime = dailyResult.cooldown.time

            const cooldownTimeString =
                `${cooldownTime.days ? `**${cooldownTime.days}** days, ` : ''}` +

                `${cooldownTime.days || cooldownTime.hours ?
                    `**${cooldownTime.hours}** hours, `
                    : ''}` +

                `${cooldownTime.hours || cooldownTime.minutes ?
                    `**${cooldownTime.minutes}** minutes, ` :
                    ''}` +
                `**${cooldownTime.seconds}** seconds`


            return message.channel.send(
                `${message.author}, you can claim your daily reward in ${cooldownTimeString}.`
            )
        }

        message.channel.send(
            `${message.author}, you claimed your **${dailyResult.reward}** daily coins!`
        )
    }

    if (command == prefix + 'work') {
        const workResult = await user.rewards.getWork()

        if (!workResult.claimed) {
            const cooldownTime = workResult.cooldown.time

            const cooldownTimeString =
                `${cooldownTime.days ? `**${cooldownTime.days}** days, ` : ''}` +

                `${cooldownTime.days || cooldownTime.hours ?
                    `**${cooldownTime.hours}** hours, `
                    : ''}` +

                `${cooldownTime.hours || cooldownTime.minutes ?
                    `**${cooldownTime.minutes}** minutes, ` :
                    ''}` +
                `**${cooldownTime.seconds}** seconds`


            return message.channel.send(
                `${message.author}, you can work again in ${cooldownTimeString}.`
            )
        }

        message.channel.send(
            `${message.author}, you worked hard and earned **${workResult.reward}** coins!`
        )
    }

    if (command == prefix + 'weekly') {
        const weeklyResult = await user.rewards.getWeekly()

        if (!weeklyResult.claimed) {
            const cooldownTime = weeklyResult.cooldown.time

            const cooldownTimeString =
                `${cooldownTime.days ? `**${cooldownTime.days}** days, ` : ''}` +

                `${cooldownTime.days || cooldownTime.hours ?
                    `**${cooldownTime.hours}** hours, `
                    : ''}` +

                `${cooldownTime.hours || cooldownTime.minutes ?
                    `**${cooldownTime.minutes}** minutes, ` :
                    ''}` +
                `**${cooldownTime.seconds}** seconds`


            return message.channel.send(
                `${message.author}, you can claim your weekly reward in ${cooldownTimeString}.`
            )
        }

        message.channel.send(
            `${message.author}, you claimed your **${weeklyResult.reward}** weekly coins!`
        )
    }




            `\`${prefix}daily\` - gets your daily reward\n` +
            `\`${prefix}work\` - gets your work reward\n` +
            `\`${prefix}weekly\` - gets your weekly reward\n\n` +

            `\`${prefix}deposit <amount | all>\` - deposits <amount> to your balance\n` +
            `\`${prefix}withdraw <amount | all>\` - withdraws <amount> from your balance\n\n` +

            `\`${prefix}shop\` - shows the available items in the shop\n` +
            `\`${prefix}shop_buy <item> [quantity]\` - buys X items from the shop\n` +
            `\`${prefix}shop_sell <item> [quantity]\` - sells X items to the shop\n\n` +

            `\`${prefix}shop_add <name> <emoji> <price> [messageOnUse]\` - adds an item to the shop\n` +
            `\`${prefix}shop_remove <item>\` - removes an item from the shop\n` +
            `\`${prefix}shop_edit <item> <itemProperty> <newValue>\` - edits an item in the shop\n\n` +

            `\`${prefix}shop_find <item>\` - shows all the info about specified item\n` +
            `\`${prefix}shop_use <inventoryItem>\` - uses the item from the inventory\n\n` +

            `\`${prefix}shop_clear\` - clears the shop\n\n` +

            `\`${prefix}inventory\` - shows your inventory\n` +
            `\`${prefix}inventory_clear\` - clears your inventory\n\n` +

            `\`${prefix}history\` - shows your purchases history\n` +
            `\`${prefix}history_clear\` - clears your purchases history\n\n` +

            `\`${prefix}shop_hide <item>\` - hides an item from the shop\n` +
            `\`${prefix}shop_hidden\` - shows the hidden items\n` +
            `\`${prefix}shop_show <item>\` - shows an item in the shop\n\n` +

            `\`${prefix}shop_lock <item>\` - locks an item in the shop\n` +
            `\`${prefix}shop_locked\` - shows the locked items\n` +
            `\`${prefix}shop_unlock <item>\` - unlocks an item in the shop`